<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/api/ol/ol.css" type="text/css" />
    <style>
      .map {
        height: 100%;
        width: 100%;
      }
      .ol-popup {
        position: absolute;
        background-color: white;
        box-shadow: 0 1px 4px rgba(0, 0, 0, 0.2);
        padding: 15px;
        border-radius: 10px;
        border: 1px solid #cccccc;
        bottom: 12px;
        left: -50px;
        width: fit-content;
      }
      .ol-popup:after,
      .ol-popup:before {
        top: 100%;
        border: solid transparent;
        content: " ";
        height: 0;
        width: 0;
        position: absolute;
        pointer-events: none;
      }
      .ol-popup:after {
        border-top-color: white;
        border-width: 10px;
        left: 48px;
        margin-left: -10px;
      }
      .ol-popup:before {
        border-top-color: #cccccc;
        border-width: 11px;
        left: 48px;
        margin-left: -11px;
      }
      .ol-popup-closer {
        text-decoration: none;
        position: absolute;
        top: 2px;
        right: 8px;
      }
      .ol-popup-closer:after {
        content: "✖";
      }
    </style>
    <script src="/api/ol/ol.js"></script>
    <title>Farmer Location</title>
  </head>
  <body style="margin: 0; padding: 0">
    <div id="map" class="map"></div>
    <div id="popup" class="ol-popup">
      <a href="#" id="popup-closer" class="ol-popup-closer"></a>
      <div id="popup-content">fgdfgdfgdfg</div>
    </div>
    <html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/api/ol/ol.css" type="text/css" />
    <style>
      .map {
        height: 100%;
        width: 100%;
      }
      .ol-popup {
        position: absolute;
        background-color: white;
        box-shadow: 0 1px 4px rgba(0, 0, 0, 0.2);
        padding: 15px;
        border-radius: 10px;
        border: 1px solid #cccccc;
        bottom: 12px;
        left: -50px;
        width: fit-content;
      }
      .ol-popup:after,
      .ol-popup:before {
        top: 100%;
        border: solid transparent;
        content: " ";
        height: 0;
        width: 0;
        position: absolute;
        pointer-events: none;
      }
      .ol-popup:after {
        border-top-color: white;
        border-width: 10px;
        left: 48px;
        margin-left: -10px;
      }
      .ol-popup:before {
        border-top-color: #cccccc;
        border-width: 11px;
        left: 48px;
        margin-left: -11px;
      }
      .ol-popup-closer {
        text-decoration: none;
        position: absolute;
        top: 2px;
        right: 8px;
      }
      .ol-popup-closer:after {
        content: "✖";
      }
    </style>
    <script src="/api/ol/ol.js"></script>
    <title>Farmer Location</title>
  </head>
  <body style="margin: 0; padding: 0">
    <div id="map" class="map"></div>
    <div id="popup" class="ol-popup">
      <a href="#" id="popup-closer" class="ol-popup-closer"></a>
      <div id="popup-content"></div>
    </div>
    <script type="text/javascript">
      var currentPos;
      const container = document.getElementById("popup");
      const content = document.getElementById("popup-content");
      const closer = document.getElementById("popup-closer");

      const overlay = new ol.Overlay({
        element: container,
        autoPan: {
          animation: {
            duration: 250,
          },
        },
      });
      closer.onclick = function () {
        overlay.setPosition(undefined);
        closer.blur();
        return false;
      };

      const initalFeaturesLayer = new ol.layer.Vector({
        source: new ol.source.Vector(),
        style: new ol.style.Style({
          image: new ol.style.Circle({
            radius: 6,
            stroke: new ol.style.Stroke({
              color: "rgba(200,200,200,1.0)",
              width: 2,
            }),
            fill: new ol.style.Fill({
              color: "rgba(255,0,0,1.0)",
            }),
          }),
        }),
      });
      let details = {
        coordinates: {
          lat: -0.5669,
          lng: 34.9341,
        },
        url: "https://www.duniamaps.com/tile/{z}/{x}/{y}.png",
        attribution:
          'Map data & copy; <a href="https://duniamaps.com/">DuniaMaps</a>',
      };

      //loadData();

      //   function loadData() {
      //     fetch("/api/customers/geojson")
      //       .then((res) => {
      //         if (res.ok) return res.json();
      //         else throw Error("");
      //       })
      //       .then((data) => {
      //         let f = [];

      //         data.forEach((element, i) => {
      //           f.push({
      //             type: "Feature",
      //             id: i,
      //             geometry_name: "geom",
      //             geometry: {
      //               type: "Point",
      //               coordinates: element.point.coordinates,
      //             },
      //             properties: {
      //               ID: element.ID,
      //               Name: element.Name,
      //               Longitude: element.Longitude,
      //               Latitude: element.Latitude,
      //               Zone: element.Zone,
      //               Route: element.Route,
      //               DMA: element.DMA,
      //               Location: element.Location,
      //               SchemeName: element.SchemeName,
      //               Brand: element.Brand,
      //               Material: element.Material,
      //               Class: element.Class,
      //               AccountNo: element.AccountNo,
      //               MeterNo: element.MeterNo,
      //               MeterSize: element.MeterSize,
      //               MeterStatus: element.MeterStatus,
      //               ConnectionStatus: element.ConnectionStatus,
      //               AccountStatus: element.AccountStatus,
      //               User: element.User,
      //               createdAt: element.createdAt,
      //               updatedAt: element.updatedAt,
      //             },
      //           });
      //         });
      //         let d = {
      //           type: "FeatureCollection",
      //           features: f,
      //           crs: {
      //             type: "name",
      //             properties: { name: "urn:ogc:def:crs:EPSG::4326" },
      //           },
      //         };

      //         console.log(d);

      //         initalFeaturesLayer.setSource(
      //           new ol.source.Vector({
      //             features: new ol.format.GeoJSON({
      //               dataProjection: "EPSG:4326",
      //               featureProjection: "EPSG:3857",
      //             }).readFeatures(d),
      //           })
      //         );
      //       })
      //       .catch((e) => {
      //         console.log(e);
      //       });
      //   }

      const iconFeature = new ol.Feature({
        geometry: new ol.geom.Point(
          ol.proj.fromLonLat([details.coordinates.lng, details.coordinates.lat])
        ),
        name: "My Location",
      });

      const iconStyle = new ol.style.Style({
        image: new ol.style.Icon({
          anchor: [0.5, 0.5],
          anchorXUnits: "fraction",
          anchorYUnits: "fraction",
          src: "/api/images/icon.svg",
        }),
      });
      iconFeature.setStyle(iconStyle);

      const vectorSource = new ol.source.Vector({
        features: [iconFeature],
      });

      const vectorLayer = new ol.layer.Vector({
        source: vectorSource,
      });

      const view = new ol.View({
        center: ol.proj.fromLonLat([
          details.coordinates.lng,
          details.coordinates.lat,
        ]),
        zoom: 15,
      });

      var map = new ol.Map({
        target: "map",
        layers: [
          new ol.layer.Tile({
            source: new ol.source.XYZ({
              url:
                "https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/{z}/{x}/{y}" +
                "?access_token=pk.eyJ1IjoiZ2F0aG9nbzEiLCJhIjoiY2t0djhndnB4MGkzdDJucDg2bW5uNXNrcyJ9.mnbTMXxDrdYnTrb8Gr7_MA",
            }),
          }),
          initalFeaturesLayer,
          vectorLayer,
        ],
        view: view,
      });

      function adjustMarker(lng, lat) {
        iconFeature.setGeometry(
          new ol.geom.Point(ol.proj.fromLonLat([lng, lat]))
        );
        view.setCenter(ol.proj.fromLonLat([lng, lat]));
        view.setZoom(18);
      }

      map.on("singleclick", function (evt) {
        //  const coordinate = evt.coordinate;
        //  const hdms = ol.proj.coordinate;
        // content.innerHTML = "<p>You clicked here:</p><code>" + hdms + "</code>";
        //  overlay.setPosition(coordinate);
      });
    </script>
    <script></script>
  </body>
</html>

    <script></script>
  </body>
</html>
